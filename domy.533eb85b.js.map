{"version":3,"sources":["node_modules/domy-lang/bin/utils.js","node_modules/domy-lang/bin/lexer.js","node_modules/domy-lang/bin/parser.js","node_modules/domy-lang/bin/interpreter.js","domy.mjs"],"names":["types","terop","binop","unop","paren","brack","comma","assign","saved","name","tokenTypes","expr","ternary","inv","block","loop","func","term","id","uno","and","xor","or","test","varDec","varAss","std","words","reserved","Set","operators","unaryOperators","binaryOperators","order","Map","ops","isIrrelevant","c","isComment","isOperator","has","isDoubleOperator","n","isParenthesis","isBracket","isComma","isEqual","alphabet","isAlphabetic","match","word","isWord","printError","fileContent","t","s","r","from","to","console","error","start","end","length","rightTrim","slice","trimRight","trimmed","trimLeft","offset","line","blank","repeat","Scope","parent","vars","current","value","get","undefined","set","search","DomyLexer","record","text","i","row","col","tokens","addToken","type","push","cur","past","str","Error","Infinity","options","table","DomyParser","results","parseError","peek","advance","statement","left","right","cond","args","arg_list","inv_list","not","expression","parseProgram","log","JSON","stringify","DomyInterpreter","global","add","arg","tree","evaluate","node","scope","terminal","identifier","ternaryOperation","unaryOperation","andExpression","xorExpression","orExpression","comparison","variableDeclaration","variableAssignment","parenthesisGroup","functionInvocation","blockGroup","reservedWord","loopGroup","functionDeclaration","find","ret","validate","declaration","assignment","reassign","v","values","next","window","runCode","editor","getValue","lexer","tokenize","parser","parse","pop","replace","document","createElement","getElementById","replaceWith","runner","out","innerHTML","appendChild","run"],"mappings":";;AIAA;;AACA;;AACA;ADFA,AFAA,ACAA;AEGA;;;;AAEAsJ,MAAM,CAACC,OAAP,GAAiB,SAASA,OAAT,GAAmB;AAEhC,AJPJ;AIQI,AJPG,IAAMvJ,EIOHoF,GJPQ,CIOJ,EJPO,CIOJoE,MAAM,CAACC,QAAP,EAAb,CAHgC,CAKhC;AJRAxJ,EAAAA,EGAiBoH,AFcAnC,ACdAiB,GFAZ,EAAE,kBADU;AIUjB,AJRAjG,EAAAA,IIQMwJ,CJRD,EAAE,EIQI,GAAG,IAAIxE,QJVD,MIUH,EAAd;AACAwE,AJRAvJ,EIQAuJ,AJRAvJ,IAAI,CIQC,CAACwJ,AJRA,QIQN,CAAevE,IAAf,EAPgC,CAShC,AJbiB;AGGjB,AFcH,ACdG,AFCAhF,EAAAA,KAAK,EAAE,cCaI,ADjBM,CEGH,KCAA;ACWd,ADXc,AFcH,ACdG,AFEdC,EAAAA,IISMuJ,CJTD,EAAE,GISK,GAAG,IAAIzD,IJdF,WIcF,EAAf;AACAyD,AJTAtJ,EISAsJ,AJTAtJ,KAAK,CISC,CAACuJ,AJTA,KISP,CAAaH,CJfI,IIeC,CAACvE,MAAN,CAAa2E,GAAb,EAAb,EAAiC1E,IAAjC,EAXgC,CAahC;ADbI,AFcN,ACdM,AFGJ7E,EAAAA,MAAM,CGHG+G,CHGD,KGHJ,GAAc,IAAI7C,AHJL,YGIC,CAAU,IAAV,CAAd;ACcJ,ADbI,AFcN,ACdM,AFGJjE,EAAAA,IIUMuJ,CJVD,EGHIzC,AFcNnC,ACdMA,AFGF,IIUM,EDbT,AFcN,ACdM,CEaY6E,ADbAzC,EFcJ,ACdM,CCAd,AHLa,CGKG,AFctB,ACdM,IEaoB,CAAC0C,EDbrB,EAAyB,SCab,CAAuB,MAAvB,CAAhB;AACAF,ADbQrE,AFcV,ACdG,AFGDjF,EIUAsJ,AJVAtJ,IGHQiF,AHGJ,EAAE,CIUC,CAACxE,ADbI,ECaZ,ADbcR,GCaD,UAAb,KDbyBgB,GADI;ACe7BsI,ADbQpD,AHPS,CAAd,CIoBHoD,IDbQpD,ICaA,ADbI,CCaHsD,CDbK,CAAC,SAAD,CAFe,ECe7B,CAAwB,UAAxB,EAAoCC,WAApC,CAAgDJ,OAAhD,EAhBgC,CAkBhC;ADdQlF,MAAAA,KAAK,EAAE,eAAA2C,GAAG,EAAI;ACetB,ADdY7D,AHET,IAAMjD,EIYH0J,EDdMzG,ICcA,EJZO,CIYJ,ADdI,CAACuD,CHEE,EIYHG,ADdP,CAAYF,IAAI,CAACC,SAAL,CACRI,GAAG,CCaJ,ADbK9B,ECapB,EDbgB,KAAahF,kBAAWM,IAAxB,GACMwG,GADN,GAEMA,GAAG,CAAC3C,KAHF,EAIR,CACI,MADJ,EACY,MADZ,EACoB,MADpB,EAC4B,MAD5B,EAEI,OAFJ,EAEa,MAFb,EAEqB,MAFrB,EAE6B,OAF7B,CAJQ,EAQR,CARQ,CAAZ;ACeZuF,ADLY,AHPZzJ,EIYAyJ,AJZAzJ,IAAI,EIYE,AJZA,CIYC2G,MAAP,ADLmB,CCKL4B,IJbQ,IIatB,CAAuB,CFhBjB1D,GDcAJ,GGEN,EAAgC,AFhBlBA,CDcF,KCdQ;AEiBhBM,ADNiBb,AFIvB,ACbM,AFGJjE,EAAAA,EIYI8E,IAAI,CJZD,CIYGhF,ADNWmE,CHNZ,IGMiB,EAAE,WCMPnD,EJdC,CIaU;AAE5BkF,ADPe,AFKrB,ACbM,AFGJ/F,EAAAA,EIYI+F,CJZD,EAAE,CIYG,CDPI,CCOF,AHFRvB,ACbMA,CEeG,AHFR,ACbM,GDaH,ACbM,CDad,ACbM,KEeM,CAFsB,OJbV;AIgBlBR,ADPK,AFKX,ACbM,AFGJ/D,EAAAA,EIYI+D,GJZC,EIYI,AJZF,CCULS,ACbQc,CEeC,EHFN,GAAG,ADdc,CCcxB,ACbmB,GAAG,EAAhB,CAJgB,CAMhB,EEaOoB,GAAG,EAAI;AACV,ADvBqB,AFqB/B,ADVEhH,EAAAA,GGXI,EHWC,EAAE,CIYO6J,AHFZ9E,GGEe,AHFZ,GGEe4B,AHFZ,CAAV,CAJc,CAMd,ADjBwB,CIiBE,CAACC,SAAL,CACRI,GAAG,CAAC9B,IAAJ,KAAahF,kBAAWM,IAAxB,GACMwG,GADN,GAEMA,GAAG,CAAC3C,KAHF,EAIR,CACI,MADJ,EACY,MADZ,EACoB,MADpB,EAC4B,MAD5B,EAEI,OAFJ,EAEa,MAFb,EAEqB,MAFrB,EAE6B,OAF7B,CAJQ,EAQR,CARQ,CAAZ;AAUA,ADhBP,ADPG,AFEJ9D,EAAAA,IAAI,EAAE,EIqBQ4G,AFvBJtB,IEuBQ,GAAG2D,GFvBD,AFJE,GEIC,EEuBM,CAACC,MFvBpB5D,OEuBW,CAAuB,EFvBrB,CAAA9C,CAAC,CEuBH,CAAb,AFvBoB;AEwBpBoE,AHVV,ACd8B,AFG5B3G,EAAAA,IIqBQ2G,AJrBJ,EAAE,EIqBM,AHVRnC,CGUS8E,KHVH,GAAG,CGUL,AFvB+BhE,CDazC,EGU2B+D,CFvBkB,EEuBnC,AFxBoB,IFJN;AI6BdN,AFzBoB,AFI5B9I,EAAAA,IIqBQ8I,AJrBJ,EAAE,IEHUtG,CEwBD,CAAC8G,EFzBY,EFJN,OI6Bd,AFxBQ9G,CEwBYkE,GFzBA,CEyBpB;AACA,AHXV,ACf8B,AFK5BvH,EAAAA,KAAK,EAAE,CCUHqF,ECdkB/B,CEyBP,CF1Ba,IDehB,GAAG,CDnBO,CEKAA,EADM,KDexB+B,QAAW,CAACL,IAAD,EAAOM,IAAP,EAAajC,IAAb,EAAmBC,EAAnB,EAAuB4B,GAAvB,EAA4BC,GAA5B;AGWEV,AHXF,ACfa,AFM5B3D,EAAAA,EAAE,EAAE,EIoBa2D,IFzBSS,CEyBJ,EAAE,AHVzBE,AChB6B,GFJN,GCoBjB,CAACG,EEPF8B,ADRsBnC,EDe3B,CAAY,AChBiB,GCSlB;ACiBK,ADjBL,AFOGF,AChBe,AFO5BjE,EAAAA,GAAG,EImBK,AJnBH,GCSQiE,ECfkBG,EDed,CChBW,CDgBfH,IAAF,ICfoBG,AFLT,GEIM;AE2BvB,ADlBK,AFOSG,ADRnBtE,EAAAA,GAAG,EAAE,GCQcsE,EDpBG,ECoBC,EAAJA,IAAR;AGPqB,ADAtB,AFOejC,ACdjB,AFORpC,EAAAA,CIAA,EJAG,EAAE,GCOoBoC,EDpBH,ECoBO,EAAJA,IAAd,WCdQ2B,IAAX,EAAiB,QAAjB,EAA2B7B,CAA3B,EAA8B+B,GAA9B,EAAmCC,GAAnC,EAAwC9B,IAAxC,EAA8CC,EAA9C;AE2BR0G,AHb+B1G,ACbvB,AFORpC,EImBA8I,AJnBA9I,EAAE,EAAE,EImBE,CAACkJ,CHbwB9G,ADpBT,EIiCtB,AHbiC,CGatBkG,CHboBlG,ACbjB,EDaH,ECbOqC,CE0BD,CAACZ,GF1BJ,EAAN,CE0BG,CAAc2E,GAAd,EAAX;AAEH,ADtBa,AFOyBxE,ACZ9B,AFOL/D,CItBJ,CJsBIA,IAAI,CEXA,CFWE,ECK6B+D,GAAG,CDpBhB,CCoBaA,GAAxB;AENP,AFMoCC,ADJxC/D,EAAAA,MAAM,ECIkC+D,ADJhC,GCImC,EAAHA,cENZkC,GHdN,CGclB;AAAA,AFMO,ACXP,AFQJhG,EAAAA,MAAM,CCGP,CADgB,ACVL8E,AFQF,IGHOC,GDLE,GAAG,GCKhB,MDLMD,EFTY,KESF,CAAClE,CAAD,EAAIiB,CAAJ,EAAU;ACMtB,AFIO,ACVe,AFS9B5B,EAAAA,GAAG,ECCL,ADDO,CCPO,CAWd,MEPegG,QAAL,CAAclB,ADLShB,MAAM,CAACH,CAAD,CCK7B,ADNsB,ECMG,KAAKiC,MAA9B;AADJ,ADL0B,AFTR,CAAnB,EAqBP,SEXoBlC,IADc,aACdA,IADc;ACIpB,ADJoB,YACRM,IADQ,aACRA,IADQ;ACIpB,AFUZ,ACZU,YAAIrD,CDYPgD,ACZQ,CDYP,GAAGD,ACZQ/C,CAAC,GDYL,CAAC0B,CCZSqB,IAAf,CDYV,CCXciB,CDWU,SCXA,qBAAchE,CAAd,wBAA6B+C,IAA7B,OAAV;ACCF,AFWX,ACXS,AFSL,IAAMzD,KAAK,GCETU,ACXOiB,AFSK,CCEX,ACXO,AFUb,GCCS8B,CCXQ9B,CAAC,CFSD,CCEJ,CAAC+B,ADAd,CCAa,CAAd,ACXwBK,IAAf,CFSS,CERLW,CFWZ,IAHiB,EAIjB,GEZsB,CFQL,EAKjB,OALiB,EAMjB,QANiB,CERmB/C,CAAd,AFetB,OAPiB,EAQjB,UARiB,CAAd,IERgDoC,IAA7B,OAAV;ACDF,ADEF,eAAOF,MAAM,CAACH,CAAC,EAAF,CAAb;ACFE,AFYX,ACTM,AFgBF,IAAMzD,GEvBL,KDgBD,ADOc,GAAG,IAAIC,GAAJ,CAAQF,KAAR,CAAjB,EAEP,MCToBU,CAAb,CAAJ,EAAqB;AEZV,AFYY;AEZZ,AFaV,ACTI,UAAMiE,IDSNjE,ACTU,CDST,ECTY,GDSP,IAAV,EAAgB,ACTNiE,IAAO,GAAgB;ACJvB,AFcThB,ACVgC,AFkB9B,IAAMxD,QCRRwD,ACViBjB,CFkBA,ECRd,CDQiB,CACrB,CEnBiC,EFkBZ,EAErB,GAFqB,EAGrB,IAHqB,EAIrB,IAJqB,EAKrB,GALqB,EAMrB,GANqB,EAOrB,GAPqB,EAQrB,GARqB,CAAlB,+BElBwB,CAAM;ACJvB,AFeTkB,ACVO,YDUPA,GAAG,ACVWC,GDUR,CAAN,ECVoB,CAACH,CAAC,GAAGhB,MAAL,CAAN,GAAqBmB,MAAM,CAACH,CAAC,GAAGhB,MAAL,CAA3B,GAA0C;ACL/C,AFgBT,ACX0De,AF2BxD,IAAMrD,ME3BkDqD,IAAI,EAAE,EF2B1C,GAAG,CAC1B,GAD0B,CAAvB;AGhCO,AFiBV,ACZyD,SDO1D,ACPS,MDYF,IAAI,sBAAU/C,CAAV,CAAJ,EAAkB;AEjBd,AFiBgB,ACXrB,AF6BF,IAAML,GE/BL,CApBgB,CAwBhB,UF2BoB,GAAG,CAC3B,IAD2B,EAE3B,IAF2B,EAG3B,GAH2B,EAI3B,GAJ2B,EAK3B,GAL2B,CAAxB;AGnCO,AFkBV,cAAI4D,GAAG,GAAGR,IAAI,CAACC,CAAD,CAAd;AElBU,AH0CP,IAAMpD,KAAK,GAAG,IAAIC,GAAJ,CAAQ,CACzB,CAAC,GAAD,EAAM,EAAN,CADyB,EAEzB,CAAC,GAAD,EAAM,EAAN,CAFyB,EAGzB,CAAC,IAAD,EAAO,EAAP,CAHyB,EAIzB,CAAC,IAAD,EAAO,EAAP,CAJyB,EAKzB,CAAC,GAAD,EAAM,EAAN,CALyB,EAMzB,CAAC,GAAD,EAAM,EAAN,CANyB,EAOzB,CAAC,GAAD,EAAM,EAAN,CAPyB,EAQzB,CAAC,GAAD,EAAM,EAAN,CARyB,CAAR,CAAd;AGvCF,AFgBD,ACVI,UAAMjB,IAAI,GDUP2E,ACVU,GDUP,KAAK,CCVL3E,GDUV,CCViB,CDUI,ECVE;ADWtBoE,ACXsB,AF2CpB,IAAMlD,GAAG,GAAG,EChCdkD,CAAC,CDgCiBxD,GAAJ,CAAQC,GE1CQwE,IAAI,EADZ,AF2CR,CAAZ,EAEP;ACjCKV,ACZsB,YDYtBA,ACXeR,GDWZ,CCZmB,EDYhBA,IAAI,CAACC,CAAD,CAAV,CCXeD,IADO;ADatB,ACbsB,YACDM,IADC,UACDA,GCLbiC,CDIc,KCJRC,OAAO;AAClB,cAAQD,IAAI,CAACjC,IAAb;AACI,AFgBRL,ACZQ,AF4CL,IAAMjD,MChCTiD,CAAC,CCZWD,CCJC1E,GDIG,AF4CK,GAAG,EE5CH,MAAb,CF4CC0B,CE5CoB,ECJLnB,IAAhB,KHgDgB,CAAAoB,CAAC;AG/Cb,AFgBZkD,ACZYgB,AF2Ca,SAAIlE,CC/B7BkD,ACZYgB,AF2CkB,GC/B3B,CD+B+B,EC/B5B,CEhBa,AFgBnB,ACZmB,AF2CU,CE3CT,GF2CqBlE,CG/CjBwF,AH+CkB,EE3CvB,CAAP,EF2CmC,GG/C5B,AH+CM,CG/CQF,IAAd,EAAoBC,KAApB,CAAP;AFiBZ,ACZY,AF0Ca,CAAtB,QCtCG,MAQA,ECZa,EDYT,6BAAiBvF,CAAjB,EAAoB+C,IAAI,CAACC,CAAC,GAAG,CAAL,CAAxB,CAAJ,EAAsC;AEhBpC,AFgBsC,ACX9BK,YAAAA,CCLHhF,GDKO,EAAEA,aCLEQ,EAAhB,GDKyBD,IADd;ACHP,AFgBZwE,ACXgBZ,UDWhBY,ECXgBZ,KCLG,ADKE,CDWb,CCXe,GCLCiD,OFiBpBzF,CADI,EEhBW,CAAgBsF,IAAhB,CFkBlB3H,CElBwC4H,KAAtB,CAAP,MFkBL1H,KAFC,EAGPmF,CAHO,EAIPA,CAAC,GAAG,CAJG,EAKPC,GALO,EAMPC,GANO,CAAR;AAQAF,ACrBmB,UDqBnBA,CAAC,ACrBW;ACFJ,AFwBRE,AClBS,AFuCN,IAAMjD,KE7CD,CDwBRiD,GExBa7E,AFwBV,ADqBe,EEvCH,CFuCM,GEvCF0E,IAAI,EFuCd9C,GEvCmB,GCNJ1B,GH6CH,CEvCN,AFuCMyB,CAAC,CEvCe,CCN7B;AACI,AFwBZ,AClBYkE,AFsCU,SC/BhB,AD+BoBlE,CEtCdkE,AFsCe,KCpBrB,ADoB0B,EG5Cb,ADMA,CAAC,AFsCE,CCpBZ,GExBcwB,GDML,CAAP,YCNO,CAAsBJ,GFwBpBtF,CExBF,AFwBT,CAAJ,CExByCuF,CFwBtB,IExBN,CAAP;AFwBe,ACjBf,AFqCU,CAAnB,gBErCgB;ACNX,AFwBR,ACjBgBlC,YAAAA,CCPHhF,CFwBPgF,ECjBc,EDiBV,ACjBYhF,GDkBrB2B,CAAC,KAAK,GAAN,CEzBuBlB,GAAhB,AFyBMkB,CAAC,CClBkBpB,IDkBb,ACnBD,GDmBlB,GACGjB,aAAMC,KADT,GAEGoC,CAAC,KAAK,GAAN,GACCrC,aAAMG,IADP,GAECH,aAAME,KALX;AEvBY,AF6BZuF,ACtBgBZ,UDsBhBY,ECtBgBZ,KCPG,ADOE,CDsBb,CACPxC,ACvBsB,CDsBf,EE7BgB2F,AF+BvBtC,IAFO,EAGPL,CAHO,EAIPA,CAAC,GAAG,CEjCc,AF6BX,CE7B+BsC,CFkCtCrC,GElCkB,AF6BX,EE7BqCsC,AFmC5CrC,GANO,CAAR,CE7BmB,CAAP;AFqCZ,AChCmB,SDiBb,ECjBM,IDgCN,IAAI,oBAAQlD,CAAR,CAAJ,EAAgB;AEpCd,AFoCgB,AC5Bf,AFkCN,IAAME,KExCM,ICFF7B,CH0CM,CElCJ,EFkCO,EElCH0E,IAAI,GFkCd7C,EElCmB,GCRJnB,ADQT,EAAkB,CCRzB,EH0Cc,CAAAiB,CAAC;AGzCX,AFoCZoD,AC5BYc,AFiCW,SAAIpE,CCL3BsD,AC5BYc,EFiCkB,CAAC/D,GAAJ,CGzCR,ADQA,AFiCgBH,CCL3B,AC5BY,AFiCO,CCJ1BA,ADIsB,CCLf,CC5BW,CCRK4F,AFsCvBjI,AC9BW,aCRO,AFsCZO,CEtC+BoH,IAAnB,CFoCX,CEpCoCC,CFuC3CvC,CAHO,EAIPA,CExCkB,AFwCjB,CExCU,EFwCP,CAJG,EAKPC,GALO,EAMPC,GANO,CAAR;AAQA,ACnCY,AFgCW,CAApB,QCNG,KC1BYV,CDmCZ,IAAI,ACnCa,GAAG2B,SAAS,EAAvB,YDmCYnE,CAAd,CAAJ,EAAsB;AE3CpB,AF2CsB,AClClBkE,UAAAA,GCTC7F,IDSM,CAAC,GAAD,CAAP,SCTYW,GAAhB;AACI,AF2CZoE,UAAAA,OE3CmB,CF2CX,CACPpD,CADO,EE3CgB6F,UF6CpBlI,GE7Ce,CAAmB2H,IAAnB,EAAyBC,GF6ClCxH,EE7CS,CAAP,EF2CJ,SAEUiC,CAAC,KAAK,GAAN,GAAY,MAAZ,GAAqB,OAF/B,GAGPgD,CAHO,EAIPA,CAAC,GAAG,CAJG,EAKPC,GALO,EAMPC,GANO,CAAR;AAQA,AC1CY,SDiCN,KCjCUe,CD0CV,GC1Cc,CD0CV,EC1CalB,IAAP,KAAgB,GAApB,EAAyB,MD0CjB/C,CAAV,CAAJ,EAAkB;AElDhB,AFkDkB,ACzCV,AF8Bb,IAAMI,SGvCI/B,MDSU,CF8BE,GAAG,QGvCJY,CHuCfmB,CGvCD,eHuCoB,CAACJ,CAAD,EAAIK,CAAJ;AGtChB,AFkDZ+C,ACzCoBC,AF6BQ,SAC5B,CCWAD,ADXCpD,CAAC,GE9BkBqD,EF8Bb,CGvCY,CFkDX,ACzCgB,CD0CvBrD,ADZA,CCWO,ACzCkB3B,ECTFyH,CHuCV9F,CAAC,KAAK,GCahBrC,ADbJ,EGvCmB,CAAkB2H,EHuCTjF,CE9BStC,AF8BR,CGvCV,EAAwBwH,EDQpB,AF+BW,ECaxBvH,CEpDS,AHsCS,CGtChB,GFkDJ,SAEUgC,CAAC,KAAK,GAAN,GAAY,MAAZ,GAAqB,OAF/B,GAGPgD,CAHO,EAIPA,CAAC,GAAG,CAJG,EAKPC,GALO,EAMPC,GANO,CAAR;AAQA,AChDoBV,AF4BQ,CAAzB,QCWG,KCvCcA,CDgDd,IAAI,AChDe,EAALA,kBDgDFxC,CAAR,CAAJ,EAAgB;AEzDd,AFyDgB,AClDD,aCPV3B,ADOG,kBCPQa,IAAhB;AACI,AFyDZkE,AC/Ca,UD+CbA,OEzDmB,CFyDX,CACPpD,CADO,EEzDgB+F,AF2DvBpI,UE3DkB,CAAgB2H,EF2D5BrH,EE3DY,EAAsBsH,CFyDjC,EAGPvC,CAHO,CEzDW,CAAP,AF6DXA,CAAC,GAAG,CAJG,EAKPC,GALO,EAMPC,GANO,CAAR;AAQA,SATM,MASA,IAAI,yBAAalD,CAAb,CAAJ,EAAqB;AEhEnB,AFgEqB,ACtDjBkE,AF2BT,IAAM5D,ME3BG4D,GCVC7F,IDUM,AF2BG,CE3BF,EF2BK,CE3BN,CAAP,OF2BHiC,EGrCenB,MAAhB,KHqCiB,CAAAa,CAAC;AGpCd,AFgEZ,ACtDY,AF0Bc,SAAIA,CAAC,IC4B3BwD,ACtDYY,CF0BoB,EGpCjB,CFgEX,ACtDI,AF0BkB,GC4BnBpB,CEhEagD,AFgExB,AD5B2ChG,CAAC,KAAK,GAAvB,UGpCP,CAAyBsF,IAAzB,EAA+BC,KAA/B,CAAP;AFiEZ,AD7B0B,CAAvB,aC6BC9B,GAAG,GAAG,EAAV;AEhEQ,AFiER,ACvDY,aCVCpF,CFiETkF,ACvDYU,IDuDT,ACvDa,GDuDVlB,ACvDaA,IDuDT,ACvDE,CDuDDC,CAAD,CAAd,ECvDgC,CCVR5D,EDUZ,EAAyB,ECV7B;AACI,ADUIgF,YAAAA,IAAI,CCVD,EDUI3F,GCVCwH,EDUI,EAAZ,cCVG,CAAwBX,IAAxB,EAA8BC,KAA9B,CAAP;AFiEZ,ACtDa,WAFD,MDwDL,ACtDY,mBDsDLhC,IAAP,CAAP,EAAoB;AEhEZ,AFiEPE,ACtDeW,AFuBb,IAAM7D,QC+BRkD,ACtDeW,CCXH/F,AHkCK,EC+Bd,CCtDgB,AFuBC,GC+BbkF,ACtDeY,IDsDtB,ED/BQ5D,GEvBuB,EAAhB,CCXQxC,GHkCH,CAAAiC,CGlCb,AHkCc;AGjCV,AFiEXgD,ACtDY,AFsBS,SAAIhD,CAAC,ECgC1BgD,CAAC,EDhC8B,EGjCb,CHiCO,IGjCFkD,AHiCelG,CAAC,KAAK,GAAvB,OGjCH,CAAsBsF,IAAtB,EAA4BC,KAA5B,CAAP;AFkEXhC,ADjCqB,CAAnB,WCiCFA,IAAG,GAAGR,IAAI,CAACC,CAAD,CAAV;AEjEO,AFkEP,ACvDWkB,UAAAA,GCXC7F,IDWM,CAAC,GAAD,CAAP,SCXYG,GAAhB;AACI,ADWA,cAAI6F,GCXG,EDWP,GCXY8B,kBAAL,CAAwBb,IAAxB,EAA8BC,KAA9B,CAAP;AFkEZ,cAAMlC,KAAI,GAAG9D,gBAASY,GAAT,CAAasD,GAAb,IACV9F,aAAMQ,KADI,GAEVR,aAAMS,IAFT;AEjEQ,ADWI,AFoBT,IAAMoC,OAAO,EG/BHnC,CDWG4F,AFoBG,IEpBC,GAAGlB,EFoBdvC,EEpBO,KAAgB,AFoBb,CG/BK/B,AH+BLuB,CAAC,CEpBR,EAAyB,CCX7B;AACI,AFmEZoD,ACxDgBiB,AFmBI,SAAIrE,CCqCxBoD,ADrCyB,EEnBTiB,GFmBc,EG9BX,ADWE,CDwDb,ADrCY,CCsCnBZ,CCzDuBhF,ECXA2H,AFmEhB,EAEP/C,CC1D4B,EAAb,EDwDR,EAGPG,CEtEkB,CAAgB8B,EFmE3B,EEnEW,AFuElBtC,CAAC,CEvEuCuC,CFmEjC,EAKPtC,EExEkB,CAAP,AFmEJ,EAMPC,GANO,CAAR;AAQAA,AC/Da,AFkBO,CAAjB,SC6CHA,CCjEY,EDiET,IAAIF,AC/DY,CD+DX,GAAGQ,IAAX;AE1EQ,AF2ER,AC/DgBa,SD0CV,GC1CUA,CCZHhG,EF2EP,EC/De,GAAG8F,SAAS,ECZThG,ADYR,KCZR;AACI,AF0EJ,AC9DK,iBCZM,KAAKkI,YAAL,CAAkBf,IAAlB,EAAwBC,KAAxB,CAAP;AF2EZ,iCAAWxC,IAAX,EAAiB,OAAjB,0BAA2C/C,CAA3C,GAAgDiD,GAAhD,EAAqDC,GAArD,EAA0DF,CAA1D,EAA6DA,CAA7D;AE1EQ,AF2ER,AC/DY,AFgBT,IAAMvC,OAAO,EG5BHpC,CH4BM,EC+Cb,CC/Da,GD+DTqF,GD/CDjD,EC+CH,EAAN,GD/CmB,CG5BK/B,AH4BLsB,CAAC,GG5BZ;AACI,AF2EZ,AC/DgBqD,AFeI,SAAIrD,CAAC,EEfTqD,GFec,CEfV,CCZD,CDYGhF,AFeF,IG3BIiI,SAAL,CAAehB,IAAf,ADYc/G,ECZOgH,KAArB,ADWA,CCXP;ADaIjB,AFcI,CAAjB,WEdaA,IAAI,EAAE9B,KAFH;ACVX,AF2ETQ,AC9DiBoB,QD8DjBpB,CAAC,GC9DgBoB,CCbH/F,GDaO,EAAJ+F,IAHG,SCVKzF,IAAhB;AACI,AF2EbuE,AC9DiBmB,QD8DjBnB,GAAG,CC9DcmB,KCbG,ADaE,EAALA,GCbQkC,mBAAL,CAAyBjB,IAAzB,EAA+BC,KAA/B,CAAP;AF4Eb,ACnEoB,AFiBhB,IAAM7E,GClEG,CAsHd,GCrEc,CFiBK,GAAG,YAAjB;AGzBK,ADcC,SA9BM,MA8BA,IAAIqC,IAAI,KAAK,QAAb,EAAuB;ACb1B,ADcAmB,UAAAA,MCdM,CDcC,CAAC,ECdER,KAAJ,CAAU,ADcT,CAAP,oBCdM,CAAN;AAlCR,AF+GNN,AC9Dc,AFUT,IAAMzC,ECoDXyC,QAAQ,AC9DUa,CD+DjB,CDrDsB,EEVD,CFUI,EEVDlB,CD8DjB,EAEPpF,CChEiB,GFUPgD,EEVuB,GAApB,EACI,ED+DXxC,GDtDmB,CAAA6B,CCoDlB,AC7DiB,AFS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AASa,ADmBAA,QCnBAA,IAAI,EAAEgB,ADmBNhB,IAAI,CCnBO,CAACA,ADmBNhF,KFJrBD,MAAM,OEI0BI,GADd;AClBZ,ADoBSJ,AFJhB,OGhBA,GHgBImE,IEIYnE,GFJL,CEIS,EAAEA,AFJR,IEIY,AFJ1B,CEI2B2E,IAFR;ACjBtB,ADoBmBwB,cAAAA,IAAI,EAAJA;AAHG,AFDnB,aECY,AFDLhC,OAAO,KAAK,IAAnB,EAAyB;AEMhB,AFLL,YAAMC,KAAK,GAAGD,OAAO,CAACD,IAAR,CAAaG,GAAb,CAAiBrE,IAAjB,CAAd;AACA,YAAIoE,KAAK,KAAKE,SAAd,EACI,CGjBE4C,MAAMC,AHiBD/C,KAAP,EGjBe;AACvB,ADoBQ,AFHJD,QAAAA,EGjBE6B,IAAI,CHiBC,EGjBE,ADoBE,CFHD7B,IGjBI8C,GHiBG,CAAChD,IGjBT,CAAciD,CHiBvB,GGjB2B,CAAClB,IAAnB,EAAyBmB,KAAzB,CAAb;AACA,ADoBYlC,AFHX,UGjBGe,EDoBQf,ECpBJ,CAACA,CDoBO,EAAEhF,CCpBlB,EACI,OAAO,QDmBkBQ,EADd;AClBF2D,ADoBDpE,QCpBCoE,IDoBDpE,CCpBM,EAAEgG,CDoBJ,EAAEhG,CCpBM,CAACoE,EDoBH,CAACO,ECpBZ;AAAqBM,ADkBjB,AFDf,QGjBgCA,GDkBxB,CClB4B,CHiB7BX,CGjB+B0B,IAAI,CAACf,GHiB3C,CGjBW;AAAsCoD,ADsB5C,AFJR,QGlBoDA,CDQtC,ECRyC,EAAErC,EDsB3C,ECtB+C,CAACqC,CDsB5C1D,IAAI,KAAK,OAAb,EAAsB;ACtBtB,ADuBHiB,OCvBJ,GDuBIA,UAAU,CAAC,sBAAD,CAAV;ACtBR,ADuBK,SAFM,CCrBLK,KAAK,ADuBAL,GCvBG,KAAKqB,EDuBE,CAAC,KCvBR,CAAcC,IAAI,CAACjB,KAAnB,EAA0BkB,KAA1B,CAAd,EDuBqB,CAAV;ACtBX,ADuBC,OA1GD,GCmFM/C,KAAK,GAAG6B,KAAK,CAACoC,AHkBpBrI,GGlBc,GHkBRoE,EGlBsBE,KHkBf,IGlBC,GACP0B,IAAI,CAAC5B,KAAL,IAAc,CAAC6B,KAAK,CAAC7B,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","file":"domy.533eb85b.js","sourceRoot":"..","sourcesContent":["// Types\nexport const types = {\n    terop: 'ternary:operator',\n    binop: 'binary:operator',\n    unop: 'unary:operator',\n    paren: 'parenthesis:',\n    brack: 'parenthesis:',\n    comma: 'comma',\n    assign: 'assignment',\n    saved: 'reserved',\n    name: 'word'\n};\nexport const tokenTypes = {\n    expr: 'expression',\n    ternary: 'ternary-operation',\n    inv: 'function-invocation',\n    block: 'block',\n    saved: 'reserved',\n    loop: 'while-loop',\n    func: 'function-declaration',\n    term: 'terminal',\n    paren: 'parenthesis',\n    id: 'identifier',\n    uno: 'unary-operation',\n    and: 'and',\n    xor: 'xor',\n    or: 'or',\n    test: 'test',\n    varDec: 'variable-declaration',\n    varAss: 'variable-assignment',\n    std: 'std'\n};\n\n// Reserved Words\nexport const words = [\n    'true',\n    'false',\n    'my',\n    'do',\n    'while',\n    'return',\n    'break',\n    'continue',\n];\nexport const reserved = new Set(words);\n\n// Operators\nexport const operators = [\n    '?',\n    ':',\n    '!=',\n    '==',\n    '|',\n    '^',\n    '&',\n    '!',\n];\nexport const unaryOperators = [\n    '!'\n];\nexport const binaryOperators = [\n    '!=',\n    '==',\n    '|',\n    '^',\n    '&',\n];\nexport const order = new Map([\n    ['?', 40],\n    [':', 40],\n    ['!=', 50],\n    ['==', 50],\n    ['|', 60],\n    ['^', 70],\n    ['&', 80],\n    ['!', 90]\n]);\nexport const ops = new Set(operators);\n\n// Utility Functions\nexport const isIrrelevant = c => c <= ' ' || c === ';';\nexport const isComment = c => c === '#';\nexport const isOperator = c => ops.has(c);\nexport const isDoubleOperator = (c, n) =>\n    (c === '!' || c === '=') && n === '=';\nexport const isParenthesis = c => c === '(' || c === ')';\nexport const isBracket = c => c === '{' || c === '}';\nexport const isComma = c => c === ',';\nexport const isEqual = c => c === '=';\nexport const alphabet = /^[a-zA-Z]$/;\nexport const isAlphabetic = c => c.match(alphabet);\nexport const word = /^[-_a-zA-Z0-9]$/;\nexport const isWord = c => c && c.match(word);\n\n// Error\nexport const printError = (fileContent, t, s, r, c, from, to) => {\n    console.error(`${t} Error: ${s} at row ${r}, col ${c}.`);\n    let start, end;\n    for (start = from; start >= 0; start--)\n        if (fileContent[start] === '\\n')\n            break;\n    for (end = to; end < fileContent.length; end++)\n        if (fileContent[end] === '\\n')\n            break;\n    const rightTrim =\n        fileContent\n            .slice(start + 1, end)\n            .trimRight();\n    const trimmed = rightTrim.trimLeft();\n    const offset = c - (rightTrim.length - trimmed.length);\n    const line = `${r}: `;\n    const blank = ' '.repeat(line.length + offset - 1);\n    console.error(`${line}${trimmed}...`);\n    console.error(`${blank}^`);\n    console.error(`${blank}${c}`);\n};\n\nexport class Scope {\n\n    constructor(parent) {\n        this.parent = parent;\n        this.vars = new Map();\n    }\n\n    find(name) {\n        let current = this;\n        while (current !== null) {\n            const value = current.vars.get(name);\n            if (value !== undefined)\n                return value;\n            current = current.parent;\n        }\n        return undefined;\n    }\n\n    add(name, value) {\n        this.vars.set(name, value);\n    }\n\n    reassign(name, value) {\n        let current = this;\n        while (current !== null) {\n            const search = current.vars.get(name);\n            if (search !== undefined)\n                return current.vars.set(name, value);\n            current = current.parent;\n        }\n        return undefined;\n    }\n\n}\n","import {\n\ttypes,\n\treserved,\n\tisIrrelevant,\n\tisComment,\n\tisOperator,\n\tisDoubleOperator,\n\tisParenthesis,\n\tisBracket,\n\tisComma,\n\tisEqual,\n\tisAlphabetic,\n\tisWord,\n\tprintError\n} from './utils.js';\n\nexport default class DomyLexer {\n\n\tconstructor() {\n\t\t// Record of all Lexes\n\t\tthis.record = [];\n\t}\n\n\ttokenize(text) {\n\t\t// State\n\t\tlet i = 0;\n\t\tlet row = 1;\n\t\tlet col = 1;\n\n\t\t// Tokens\n\t\tconst tokens = [];\n\t\tconst addToken = (text, type, from, to, row, col) =>\n\t\t\ttokens.push({ text, type, from, to, row, col });\n\n\t\t// Text Traversal\n\t\twhile (i < text.length) {\n\t\t\tconst c = text[i];\n\t\t\tif (isIrrelevant(c)) { // Ignore Whitespace and ;\n\t\t\t\tif (c === '\\n') {\n\t\t\t\t\trow++;\n\t\t\t\t\tcol = 0;\n\t\t\t\t}\n\t\t\t} else if (isComment(c)) { // Single Line Comment #\n\t\t\t\tlet cur = text[i];\n\t\t\t\twhile (cur !== '\\n') {\n\t\t\t\t\ti++;\n\t\t\t\t\tcur = text[i];\n\t\t\t\t}\n\t\t\t\ti--;\n\t\t\t\tcol = 0;\n\t\t\t} else if (isDoubleOperator(c, text[i + 1])) { // ==, !=\n\t\t\t\taddToken(\n\t\t\t\t\t`${c}=`,\n\t\t\t\t\ttypes.binop,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 2,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t\ti++;\n\t\t\t\tcol++;\n\t\t\t} else if (isOperator(c)) { // :, &, |, ^, ?, !\n\t\t\t\tconst type =\n\t\t\t\t\tc === '?' || c === ':'\n\t\t\t\t\t\t? types.terop\n\t\t\t\t\t\t: c === '!'\n\t\t\t\t\t\t\t? types.unop\n\t\t\t\t\t\t\t: types.binop;\n\t\t\t\taddToken(\n\t\t\t\t\tc,\n\t\t\t\t\ttype,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 1,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} else if (isEqual(c)) { // =\n\t\t\t\taddToken(\n\t\t\t\t\tc,\n\t\t\t\t\ttypes.assign,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 1,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} else if (isParenthesis(c)) { // (, )\n\t\t\t\taddToken(\n\t\t\t\t\tc,\n\t\t\t\t\t`${types.paren}${c === '(' ? 'left' : 'right'}`,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 1,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} else if (isBracket(c)) { // {, }\n\t\t\t\taddToken(\n\t\t\t\t\tc,\n\t\t\t\t\t`${types.brack}${c === '{' ? 'left' : 'right'}`,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 1,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} else if (isComma(c)) { // ,\n\t\t\t\taddToken(\n\t\t\t\t\tc,\n\t\t\t\t\ttypes.comma,\n\t\t\t\t\ti,\n\t\t\t\t\ti + 1,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t} else if (isAlphabetic(c)) { // Words\n\t\t\t\tlet past = i;\n\t\t\t\tlet str = '';\n\t\t\t\tlet cur = text[i];\n\t\t\t\twhile (isWord(cur)) {\n\t\t\t\t\tstr += cur;\n\t\t\t\t\ti++;\n\t\t\t\t\tcur = text[i];\n\t\t\t\t}\n\t\t\t\tconst type = reserved.has(str)\n\t\t\t\t\t? types.saved\n\t\t\t\t\t: types.name;\n\t\t\t\taddToken(\n\t\t\t\t\tstr,\n\t\t\t\t\ttype,\n\t\t\t\t\tpast,\n\t\t\t\t\ti--,\n\t\t\t\t\trow,\n\t\t\t\t\tcol\n\t\t\t\t);\n\t\t\t\tcol += i - past;\n\t\t\t} else { // No Match\n\t\t\t\tprintError(text, 'Lexer', `Unable to lex ${c}`, row, col, i, i);\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t\ti++;\n\t\t\tcol++;\n\t\t}\n\n\t\t// Add End Token\n\t\taddToken(\n\t\t\t'(end)',\n\t\t\ttypes.saved,\n\t\t\t-1,\n\t\t\ttext.length,\n\t\t\tInfinity,\n\t\t\tInfinity\n\t\t);\n\n\t\t// Save to record\n\t\tthis.record.push(tokens);\n\n\t\t// Return tokens\n\t\treturn tokens;\n\t}\n\n\ttoString() {\n\t\tconst options = [\n\t\t\t'text',\n\t\t\t'row',\n\t\t\t'col'\n\t\t];\n\t\tconsole.table(this.record[this.record.length - 1], options);\n\t}\n\n}\n","import { types, tokenTypes, printError } from './utils.js';\n\nexport default class DomyParser {\n\n    constructor() {\n        // Record of all Parses\n        this.record = [];\n    }\n\n    parse(tokens, text) {\n\n        // State\n        let i = 0;\n        const results = [];\n\n        // Utility Functions\n        const parseError = s => {\n            const { from, to, row, col } = peek();\n            printError(text, 'Parser', s, row, col, from, to);\n            throw new Error();\n        };\n        const advance = (c, t) => {\n            const { text, type } = tokens[i];\n            if (c && c !== text)\n                parseError(`Expected '${c}' but got '${text}'`);\n            if (t && t !== type)\n                parseError(`Expected '${t}' but got '${type}'`);\n            return tokens[i++];\n        };\n        const peek = (offset = 0) => {\n            return tokens[i + offset] ? tokens[i + offset] : { text: '' };\n        };\n\n        // EBNF Grammar Functions\n        const term = () => {\n            const { text, type } = peek();\n            if (text === 'true') {\n                advance('true');\n                return {\n                    type: tokenTypes.term,\n                    value: true\n                };\n            } else if (text === 'false') {\n                advance('false');\n                return {\n                    type: tokenTypes.term,\n                    value: false\n                };\n            } else if (text === '(') {\n                advance('(');\n                const value = statement();\n                advance(')');\n                if (peek().text !== '?') {\n                    return {\n                        type: tokenTypes.paren,\n                        value\n                    };\n                }\n                advance('?');\n                let left;\n                if (peek().text === '{') {\n                    left = block();\n                } else {\n                    left = statement();\n                }\n                advance(':');\n                let right;\n                if (peek().text === '{') {\n                    right = block();\n                } else {\n                    right = statement();\n                }\n                return {\n                    type: tokenTypes.ternary,\n                    cond: value,\n                    left,\n                    right\n                };\n            } else if (text === 'return') {\n                advance('return');\n                if (peek().text !== '}')\n                    return {\n                        type: tokenTypes.saved,\n                        text,\n                        value: statement()\n                    };\n                else\n                    return {\n                        type: tokenTypes.saved,\n                        text,\n                    };\n            } else if (text === 'continue') {\n                advance('continue');\n                return {\n                    type: tokenTypes.saved,\n                    text,\n                };\n            } else if (text === 'break') {\n                advance('break');\n                return {\n                    type: tokenTypes.saved,\n                    text,\n                };\n            } else if (text === 'while') {\n                advance('while');\n                const cond = statement();\n                const value = block();\n                return {\n                    type: tokenTypes.loop,\n                    cond,\n                    value\n                };\n            } else if (text === 'do') {\n                advance('do');\n                const args = arg_list();\n                const value = block();\n                return {\n                    type: tokenTypes.func,\n                    args,\n                    value\n                };\n            } else if (text === '{') {\n                return block();\n            } else if (type === types.name) {\n                const name = advance(null, types.name);\n                if (peek().text === '(') {\n                    const args = inv_list();\n                    return {\n                        type: tokenTypes.inv,\n                        name: name.text,\n                        args\n                    };\n                }\n                return {\n                    type: tokenTypes.id,\n                    name: name.text\n                };\n            } else if (text === '(end)') {\n                parseError('Reached end of input');\n            } else parseError('Term could not be parsed');\n        };\n        const not = () => {\n            if (peek().text === '!') {\n                advance('!');\n                const value = term();\n                return {\n                    type: tokenTypes.uno,\n                    value\n                };\n            } else return term();\n        };\n        const and = () => {\n            const left = not();\n            if (peek().text === '&') {\n                advance('&');\n                const right = and();\n                return {\n                    type: tokenTypes.and,\n                    left,\n                    right\n                };\n            } else return left;\n        };\n        const xor = () => {\n            const left = and();\n            if (peek().text === '^') {\n                advance('^');\n                const right = xor();\n                return {\n                    type: tokenTypes.xor,\n                    left,\n                    right\n                };\n            } else return left;\n        };\n        const or = () => {\n            const left = xor();\n            if (peek().text === '|') {\n                advance('|');\n                const right = or();\n                return {\n                    type: tokenTypes.or,\n                    left,\n                    right\n                };\n            } else return left;\n        };\n        const expression = () => {\n            const left = or();\n            if (peek().text === '==') {\n                advance('==');\n                const right = expression();\n                return {\n                    type: tokenTypes.test,\n                    value: '==',\n                    left,\n                    right\n                };\n            } else if (peek().text === '!=') {\n                advance('!=');\n                const right = expression();\n                return {\n                    type: tokenTypes.test,\n                    value: '!=',\n                    left,\n                    right\n                };\n            } else return left;\n        };\n        const inv = () => {\n            return statement();\n        };\n        const inv_list = () => {\n            const args = [];\n            advance('(');\n            while (peek().text !== ')') {\n                args.push(inv());\n                if (peek().text === ',')\n                    advance(',');\n            }\n            advance(')');\n            return args;\n        };\n        const arg_list = () => {\n            const args = [];\n            advance('(');\n            while (peek().text !== ')') {\n                args.push(advance(null, types.name));\n                if (peek().text === ',')\n                    advance(',');\n            }\n            advance(')');\n            return args;\n        };\n        const block = () => {\n            const value = [];\n            advance('{');\n            while (peek().text !== '}') {\n                value.push(statement());\n            }\n            advance('}');\n            return {\n                type: tokenTypes.block,\n                value\n            };\n        };\n        const statement = () => {\n            if (peek().text === 'my') {\n                advance('my');\n                const name = advance(null, types.name);\n                advance('=');\n                const value = statement();\n                return {\n                    type: tokenTypes.varDec,\n                    name: name.text,\n                    value\n                };\n            } else if (peek(1).text === '=') {\n                const name = advance(null, types.name);\n                advance('=');\n                const value = statement();\n                return {\n                    type: tokenTypes.varAss,\n                    name: name.text,\n                    value\n                };\n            } else return expression();\n        };\n        const parseProgram = () => {\n            while (peek().text !== '(end)')\n                results.push(statement());\n        };\n\n        // Parse Program\n        parseProgram();\n\n        // Save to Record\n        this.record.push(results);\n\n        // Return Statements\n        return results;\n    }\n\n    toString() {\n        const options = [\n            'type',\n            'name',\n            'text',\n            'args',\n            'cond',\n            'left',\n            'right',\n            'result',\n            'value',\n        ];\n        console.log(JSON.stringify(\n            this.record[this.record.length - 1],\n            options,\n            '  |'\n        ));\n    }\n\n}\n","import { tokenTypes, Scope } from './utils.js';\n\nexport default class DomyInterpreter {\n\n    constructor() {\n        this.global = new Scope(null);\n        this.global.add('print', {\n            type: tokenTypes.std,\n            args: ['toPrint'],\n            value: arg => {\n                console.log(JSON.stringify(\n                    arg.type === tokenTypes.func\n                        ? arg\n                        : arg.value,\n                    [\n                        'name', 'text', 'type', 'args',\n                        'value', 'cond', 'left', 'right'\n                    ],\n                    2\n                ));\n                return { value: true };\n            }\n        });\n    }\n\n    run(tree) {\n        for (const statement of tree)\n            this.evaluate(statement, this.global);\n    }\n\n    evaluate(node, scope) {\n        switch (node.type) {\n            case tokenTypes.term:\n                return this.terminal(node, scope);\n            case tokenTypes.id:\n                return this.identifier(node, scope);\n            case tokenTypes.ternary:\n                return this.ternaryOperation(node, scope);\n            case tokenTypes.uno:\n                return this.unaryOperation(node, scope);\n            case tokenTypes.and:\n                return this.andExpression(node, scope);\n            case tokenTypes.xor:\n                return this.xorExpression(node, scope);\n            case tokenTypes.or:\n                return this.orExpression(node, scope);\n            case tokenTypes.test:\n                return this.comparison(node, scope);\n            case tokenTypes.varDec:\n                return this.variableDeclaration(node, scope);\n            case tokenTypes.varAss:\n                return this.variableAssignment(node, scope);\n            case tokenTypes.paren:\n                return this.parenthesisGroup(node, scope);\n            case tokenTypes.inv:\n                return this.functionInvocation(node, scope);\n            case tokenTypes.block:\n                return this.blockGroup(node, scope);\n            case tokenTypes.saved:\n                return this.reservedWord(node, scope);\n            case tokenTypes.loop:\n                return this.loopGroup(node, scope);\n            case tokenTypes.func:\n                return this.functionDeclaration(node, scope);\n            default:\n                throw new Error('Invalid Token Type.');\n        }\n    }\n\n    terminal(node, scope) {\n        return { value: node.value };\n    }\n\n    identifier(node, scope) {\n        return scope.find(node.name);\n    }\n\n    ternaryOperation(node, scope) {\n        if (node.left.type === tokenTypes.saved)\n            throw new Error('Reserved words not allowed in condition');\n        const cond = this.evaluate(node.cond, scope);\n        const { value, type, ret } = this.evaluate(\n            cond.value\n                ? node.left\n                : node.right,\n            scope\n        );\n        return { value: ret || value, type };\n    }\n\n    unaryOperation(node, scope) {\n        if (node.value.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        return {\n            value:\n                !(node.value.type === tokenTypes.block\n                    ? this.validate(this.evaluate(node.value, scope)).value\n                    : this.evaluate(node.value, scope).value)\n        };\n    }\n\n    andExpression(node, scope) {\n        const left = this.evaluate(node.left, scope);\n        if (!left.value)\n            return { value: left.value, type: left.type, ret: left.ret };\n        const right = this.evaluate(node.right, scope);\n        const value = right.ret === undefined\n            ? left.value && right.value\n            : left.value && right.ret;\n        return { value, type: right.type };\n    }\n\n    xorExpression(node, scope) {\n        const left = this.evaluate(node.left, scope);\n        if (left.type)\n            return { value: left.value, type: left.type, ret: left.ret };\n        const right = this.evaluate(node.right, scope);\n        const value = right.ret === undefined\n            ? (left.value && !right.value) || (!left.value && right.value)\n            : (left.value && !right.ret) || (!left.value && right.ret);\n        return { value, type: right.type };\n    }\n\n    orExpression(node, scope) {\n        const left = this.evaluate(node.left, scope);\n        if (left.value || left.type)\n            return { value: left.value, type: left.type, ret: left.ret };\n        const right = this.evaluate(node.right, scope);\n        return { value: right.ret || right.value, type: right.type };\n    }\n\n    comparison(node, scope) {\n        if (node.left.type === tokenTypes.saved ||\n            node.right.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        if (node.value === '==') return {\n            value:\n                (node.left.type === tokenTypes.block\n                    ? this.validate(this.evaluate(node.left, scope)).value\n                    : this.evaluate(node.left, scope).value) ===\n                (node.right.type === tokenTypes.block\n                    ? this.validate(this.evaluate(node.right, scope)).value\n                    : this.evaluate(node.right, scope).value)\n        };\n        else return {\n            value:\n                (node.left.type === tokenTypes.block\n                    ? this.validate(this.evaluate(node.left, scope)).value\n                    : this.evaluate(node.left, scope).value) !==\n                (node.right.type === tokenTypes.block\n                    ? this.validate(this.evaluate(node.right, scope)).value\n                    : this.evaluate(node.right, scope).value)\n        };\n    }\n\n    variableDeclaration(node, scope) {\n        if (node.value.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        const declaration = scope.find(node.name);\n        if (declaration !== undefined)\n            throw new Error(`${node.name} is already defined.`);\n        scope.add(\n            node.name,\n            node.value.type === tokenTypes.block\n                ? this.validate(this.evaluate(node.value, scope))\n                : this.evaluate(node.value, scope)\n        );\n        return { value: true };\n    }\n\n    variableAssignment(node, scope) {\n        if (node.value.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        const assignment = scope.find(node.name);\n        if (assignment === undefined)\n            throw new Error(`${node.name} is undefined.`);\n        scope.reassign(\n            node.name,\n            node.value.type === tokenTypes.block\n                ? this.validate(this.evaluate(node.value, scope))\n                : this.evaluate(node.value, scope)\n        );\n        return { value: true };\n    }\n\n    validate(v) {\n        const { value, type, ret } = v;\n        if (type === 'return' && ret !== undefined)\n            return ret;\n        else if (type !== undefined)\n            throw new Error(`Invalid type: ${type}.`);\n        else\n            return { value };\n    }\n\n    parenthesisGroup(node, scope) {\n        if (node.value.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        return this.evaluate(node.value, scope);\n    }\n\n    functionInvocation(node, scope) {\n        const func = scope.find(node.name);\n        if (func === undefined)\n            throw new Error(`Function ${node.name} is not defined.`);\n        if (func.args.length !== node.args.length)\n            throw new Error(`Argument Length does not match.`);\n        if (func.type === tokenTypes.std) {\n            const values = [];\n            for (const arg of node.args) {\n                values.push(\n                    arg.type === tokenTypes.id\n                        ? scope.find(arg.name)\n                        : arg.type === tokenTypes.block\n                            ? this.validate(this.evaluate(arg.value, scope))\n                            : this.evaluate(\n                                arg.value !== undefined\n                                    ? arg.value\n                                    : arg,\n                                scope)\n                );\n            }\n            return this.validate(func.value(...values));\n        } else {\n            const next = new Scope(scope);\n            for (let i = 0; i < func.args.length; i++) {\n                next.add(\n                    func.args[i].text,\n                    node.args[i].type === tokenTypes.id\n                        ? scope.find(node.args[i].text)\n                        : node.args[i].type === tokenTypes.block\n                            ? this.validate(this.evaluate(node.args[i], scope))\n                            : this.evaluate(node.args[i], scope)\n                );\n            }\n            return this.validate(this.evaluate(func.value, next));\n        }\n    }\n\n    blockGroup(node, scope) {\n        const next = new Scope(scope);\n        for (const statement of node.value) {\n            const { value, type, ret } = this.evaluate(statement, next);\n            if (type !== undefined)\n                return { value, type, ret };\n        }\n        return { value: true };\n    }\n\n    reservedWord(node, scope) {\n        if (node.text === 'return')\n            return {\n                value: true, type: 'return',\n                ret:\n                    node.value !== undefined\n                        ? node.value.type === tokenTypes.block\n                            ? this.validate(this.evaluate(node.value, scope))\n                            : this.evaluate(node.value, scope)\n                        : undefined\n            };\n        if (node.text === 'continue')\n            return { value: true, type: 'continue' };\n        if (node.text === 'break')\n            return { value: true, type: 'break' };\n    }\n\n    loopGroup(node, scope) {\n        if (node.cond.type === tokenTypes.saved)\n            throw new Error('Reserved words only allowed in blocks');\n        while (true) {\n            const cond = node.cond.type === tokenTypes.block\n                ? this.validate(this.evaluate(node.cond, scope))\n                : this.evaluate(node.cond, scope);\n            if (!cond.value)\n                break;\n            const next = new Scope(scope);\n            const { value, type, ret } = this.evaluate(node.value, next);\n            if (type === 'return')\n                return { value: ret !== undefined ? ret : value };\n            if (type === 'break')\n                break;\n            if (type === 'continue')\n                continue;\n        }\n        return { value: true };\n    }\n\n    functionDeclaration(node, scope) {\n        return node;\n    }\n\n}\n","import DomyLexer from '/node_modules/domy-lang/bin/lexer.js';\nimport DomyParser from '/node_modules/domy-lang/bin/parser.js';\nimport DomyInterpreter from '/node_modules/domy-lang/bin/interpreter.js';\nimport { tokenTypes } from '/node_modules/domy-lang/bin/utils.js';\n\nwindow.runCode = function runCode() {\n\n    // Code\n    const text = editor.getValue();\n\n    // Lexer\n    const lexer = new DomyLexer();\n    lexer.tokenize(text);\n\n    // Parser\n    const parser = new DomyParser();\n    parser.parse(lexer.record.pop(), text);\n\n    // Output\n    const replace = document.createElement('code');\n    replace.id = 'terminal';\n    document.getElementById('terminal').replaceWith(replace);\n\n    // Interpreter\n    const runner = new DomyInterpreter();\n    runner.global.reassign('print', {\n        type: tokenTypes.std,\n        args: ['toPrint'],\n        value: arg => {\n            const out = JSON.stringify(\n                arg.type === tokenTypes.func\n                    ? arg\n                    : arg.value,\n                [\n                    'name', 'text', 'type', 'args',\n                    'value', 'cond', 'left', 'right'\n                ],\n                2\n            );\n            const node = document.createElement('div');\n            node.innerHTML = out;\n            replace.appendChild(node);\n            return { value: true };\n        }\n    });\n    runner.run(parser.record.pop());\n\n}\n"]}